import {
  $,
  QwikDragEvent,
  QwikFocusEvent,
  QwikMouseEvent,
  QwikSubmitEvent,
  component$,
  useOn,
  useOnDocument,
  useSignal,
  useStore,
  useStyles$,
  useTask$,
  useResource$,
  useVisibleTask$,
} from @builder.io/qwik

// Hack to set dirty state
declare global
  interface Window
    dirty: =>

import { isBrowser } from @builder.io/qwik/build

interface List
  name: string
  items: string[]

interface State
  lists: List[]

// Data about a card being dragged
interface DragCard
  activeList: List
  activeListEl: HTMLElement
  drag(clientX: number, clientY: number): void
  drop(): void
  el: HTMLElement
  height: number
  offset: { x: number; y: number }
  startIndex: number
  startList: List

// Data about a list being dragged
interface DragList
  drag(clientX: number, clientY: number): void
  drop(): void
  el: HTMLElement
  offset: { x: number; y: number }
  startIndex: number

type DragItem = DragCard | DragList

export default component$ =>
  state := useStore<State> {
    lists: []
  }, deep: true

  useVisibleTask$ () =>
    if isBrowser
      lists := window.localStorage.getItem "lists"
      if lists
        state.lists = JSON.parse lists

  useVisibleTask$ ({ cleanup, track }) =>
    track(state.lists)
    listsEl := document.querySelector("div.lists") as HTMLElement
    placeholderEl := document.querySelector("div.list.placeholder") as HTMLElement
    emptyImage := document.createElement("img")

    persist := ->
      console.log("saving lists", state.lists)
      window.localStorage.setItem "lists", JSON.stringify state.lists

    // TODO: If I move this outside of useVisibleTask$ and use a closure instead of window.dirty it breaks rollup
    let timeout: number | null
    window.dirty = ->
      return if timeout
      timeout = window.setTimeout ->
        timeout = null
        persist()
      , 500

    let activeItem: DragItem | null

    closest := (node: Node | HTMLElement, selector: string): HTMLElement | null ->
      if (node <? HTMLElement)
        node.closest(selector)
      else
        node.parentElement!.closest(selector)

    dragList := (clientX: number, clientY: number) ->
      // NOTE: Dragging is much smoother when the style is updated in an animation frame.
      window.requestAnimationFrame ->
        if activeItem
          { el, offset } := activeItem
          Object.assign el.style,
            top:  clientY - offset.y + "px"
            left: clientX - offset.x + "px"

          // listsEl is the container of all the lists
          if listsEl
            n := state.lists.length
            { left, width } := listsEl.getBoundingClientRect()
            x := Math.floor ( clientX - left ) * n / width

            listElements := listsEl.querySelectorAll(":scope > [draggable]:not(.dragging)")
            listsEl.insertBefore placeholderEl, listElements[x]

    dropList := (this: DragList) ->
      const endIndex = Math.min state.lists.length-1, Array.prototype.indexOf.call placeholderEl.parentElement!.querySelectorAll(":scope > :not(.dragging)"), placeholderEl
      { startIndex, el } := this

      if endIndex !== -1 and endIndex !== startIndex
        // use splice to move the item
        from := state.lists[startIndex]
        to := state.lists[endIndex]
        state.lists.splice endIndex, 0, state.lists.splice(startIndex, 1)[0]
        window.dirty?()

      window.requestAnimationFrame ->
        el.classList.remove "dragging"
        Object.assign el.style,
          top: ""
          left: ""

        activeItem = null
        placeholderEl.style.display = "none"
        // Return placeholder to original position, otherwise qwik gets confused when pushing a new list
        placeholderEl.parentElement!.insertBefore placeholderEl, null

    dragCard := (clientX: number, clientY: number) ->
      window.requestAnimationFrame ->
        if activeItem and "activeListEl" in activeItem
          { el, activeListEl, offset } := activeItem
          Object.assign el.style,
            top:  clientY - offset.y + "px"
            left: clientX - offset.x + "px"

          // listsEl is the container of all the lists
          if listsEl
            n := state.lists.length
            { left, width } := listsEl.getBoundingClientRect()
            x := Math.floor ( clientX - left ) * n / width

            listElements := listsEl.querySelectorAll(":scope > [draggable]")
            targetList := listElements[x] as HTMLElement | undefined || activeListEl

            m := targetList.querySelectorAll(":scope > ul > [draggable]").length
            { top, height } := targetList.querySelector(":scope > ul")!.getBoundingClientRect()
            y := Math.min m, Math.max 0, Math.floor ( clientY - top ) * m / height

            // Reset old card placeholder
            if activeListEl !== targetList
              oldPlaceholder := activeListEl.querySelector(":scope > ul > .placeholder") as HTMLElement
              oldPlaceholder.style.display = "none"
              oldPlaceholder.parentElement!.insertBefore oldPlaceholder, null
              activeItem.activeListEl = targetList
              activeItem.activeList = state.lists[x]

            // Set new card placeholder
            // TODO: account for list name height and form at bottom (do it in the structure of the html)
            cardElements := targetList.querySelectorAll(":scope > ul > [draggable]:not(.dragging)")
            cardPlaceholder := targetList.querySelector(":scope > ul > .placeholder") as HTMLElement | null
            if cardPlaceholder
              Object.assign cardPlaceholder.style,
                height: activeItem.height + "px"
                display: "block"

              cardPlaceholder.parentElement!.insertBefore cardPlaceholder, cardElements[y]

    dropCard := (this: DragCard) ->
      { startIndex, startList, el, activeListEl, activeList: endList } := this
      cardEls := activeListEl.querySelectorAll(":scope > ul > :not(.dragging)")
      cardPlaceholder := activeListEl.querySelector(":scope > ul > .placeholder")

      if endList
        endIndex := Math.min endList.items.length, Array.prototype.indexOf.call cardEls, cardPlaceholder

        if endIndex !== -1 and (endList !== startList or endIndex !== startIndex)
          item := startList.items.splice(startIndex, 1)[0]
          endList.items.splice(endIndex, 0, item)

          window.dirty?()

      window.requestAnimationFrame ->
        el.classList.remove "dragging"
        Object.assign el.style,
          top: ""
          left: ""

        activeItem = null
        cardPlaceholder := activeListEl.querySelector(":scope > ul > .placeholder") as HTMLElement
        cardPlaceholder.style.display = "none"
        cardPlaceholder.parentElement!.insertBefore cardPlaceholder, null

    dragstart := (event: DragEvent) ->
      target .= event.target as HTMLElement | Node
      // Find the closest draggable element
      el := closest(target, "[draggable]")

      if el
        if el.matches ".list"
          event.preventDefault()
          { clientX, clientY, dataTransfer } := event

          rect := el.getBoundingClientRect()
          offset :=
            x: clientX - rect.left
            y: clientY - rect.top
          startIndex := Array.prototype.indexOf.call el.parentElement!.querySelectorAll(":scope > [draggable]"), el
          activeItem = { el, offset, startIndex, drag: dragList, drop: dropList }

          window.requestAnimationFrame ->
            if document.activeElement
              (document.activeElement as HTMLElement).blur()

            Object.assign placeholderEl.style,
              height: rect.height + "px"
              width: rect.width + "px"
              display: "block"

            el.classList.add "dragging"
          activeItem.drag(clientX, clientY)

        else if el.matches "li.card"
          event.preventDefault()
          { clientX, clientY, dataTransfer } := event

          rect := el.getBoundingClientRect()
          offset :=
            x: clientX - rect.left
            y: clientY - rect.top
          startIndex := Array.prototype.indexOf.call el.parentElement!.querySelectorAll(":scope > [draggable]"), el
          activeListEl := el.closest(".list") as HTMLElement
          cardPlaceholder := activeListEl.querySelector(":scope > ul > .placeholder") as HTMLElement
          listIndex := Array.prototype.indexOf.call listsEl.querySelectorAll(":scope > [draggable]"), activeListEl
          startList := state.lists[listIndex]
          activeItem = {
            el,
            offset,
            startIndex,
            startList,
            activeList: startList,
            activeListEl,
            height: rect.height,
            drag: dragCard,
            drop: dropCard
          }

          window.requestAnimationFrame ->
            if document.activeElement
              (document.activeElement as HTMLElement).blur()

            Object.assign cardPlaceholder.style,
              height: rect.height + "px"
              width: rect.width + "px"
              display: "block"

            el.classList.add "dragging"
          activeItem.drag(clientX, clientY)

      return

    pointermove := (event: PointerEvent) ->
      if activeItem
        event.preventDefault()
        { clientX, clientY } := event
        activeItem.drag(clientX, clientY)

    pointerup := (event: PointerEvent) ->
      if activeItem
        activeItem.drop()

    // NOTE: Attaching dragover to document so we don't have dead spots based on which element we are over
    document.addEventListener "pointermove", pointermove
    document.addEventListener "pointerup", pointerup
    listsEl.addEventListener "dragstart", dragstart

    cleanup =>
      document.removeEventListener "pointermove", pointermove
      document.removeEventListener "pointerup", pointerup
      listsEl.removeEventListener "dragstart", dragstart

  , strategy: 'document-ready'

  removeList := $ (list: State["lists"][number]) =>
    const index = state.lists.indexOf list
    if index >= 0
      state.lists.splice index, 1
      window.dirty?()
    return

  <div .lists>
    {state.lists.map (list, i) =>
      onSubmit$ := $ (event: QwikSubmitEvent<HTMLFormElement>, form: HTMLFormElement) ->
        inputEl := form.querySelector("input") as HTMLInputElement
        list.items.push inputEl.value
        inputEl.value = ""
        window.dirty?()
        return

      <div .list draggable>
        <div .title>
          <div .close onClick$={$ => removeList list}> X
          <input value={list.name} onInput$={(_, el) =>
            list.name = el.value
            window.dirty?()
          }/>
        <ul>
          {list.items.map (item) =>
            <li .card draggable>
              <textarea value={item}>
          }
          <li .card.placeholder>
        <form .add preventdefault:submit {onSubmit$}>
          <input name=""/>
          <button >Add</button>
    }
    <div .list.placeholder>
  <button .new-list onClick$={$ =>
    state.lists.push
      name: "New List"
      items: []
    window.dirty?()
    return
  }> New List
